{"version":3,"sources":["CountdownTimer.js","App.js","serviceWorker.js","index.js"],"names":["CountdownTimer","_useState","useState","_useState2","_slicedToArray","remainingTime","setRemainingTime","_useState3","_useState4","isRunning","setIsRunning","useEffect","interval","setInterval","prevTime","clearInterval","React","createElement","_Button","onClick","prevState","operators","parsedQueryStrings","queryString","parse","window","location","search","name","max","operator","rand1","Math","floor","random","rand2","App","answer","setAnswer","total","setTotal","onNumberClick","value","length","substring","concat","flexItem","valueArr","map","_Flex","Item","style","fontSize","key","height","lineHeight","className","_WhiteSpace","size","fontWeight","textAlign","_InputItem","color","type","disabled","placeholder","alt","src","_Toast","info","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d54fd925.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Button} from \"antd-mobile\";\n\nfunction CountdownTimer() {\n    const initialTime = 60;\n    const [remainingTime, setRemainingTime] = useState(initialTime);\n    const [isRunning, setIsRunning] = useState(false);\n\n    useEffect(() => {\n        let interval;\n\n        if (isRunning) {\n            interval = setInterval(() => {\n                if (remainingTime > 0) {\n                    setRemainingTime((prevTime) => prevTime - 1);\n                } else {\n                    clearInterval(interval);\n                    setIsRunning(false);\n                }\n            }, 1000); // Update every second (1000 milliseconds)\n        } else {\n            clearInterval(interval);\n        }\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isRunning, remainingTime]);\n\n    const handleStartStop = () => {\n        setIsRunning((prevState) => !prevState);\n    };\n\n    const handleReset = () => {\n        setRemainingTime(initialTime);\n        setIsRunning(false);\n    };\n\n\n    return (\n        <div>\n            <div>\n                <Button onClick={handleStartStop}>{isRunning ? 'Pause' : 'Start'}</Button>\n                <Button onClick={handleReset}>Reset</Button>\n            </div>\n            <div>Tid kvar: {remainingTime}</div>\n        </div>\n    );\n}\n\nexport default CountdownTimer;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Button, Flex, InputItem, WhiteSpace, Toast } from 'antd-mobile';\nimport queryString from 'query-string';\nimport CountdownTimer from \"./CountdownTimer\";\n\nconst getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nconst operators = [/*'plus', 'minus'*/ 'times']; // times\nconst getRandomOperation = () => {\n    return operators[Math.floor(Math.random() * operators.length)];\n};\n\nconst parsedQueryStrings = queryString.parse(window.location.search);\nconst name = parsedQueryStrings.name;\nconst max = parsedQueryStrings.max;\nlet operator = operators[0];\nlet rand1 = Math.floor(Math.random() * max);\nlet rand2 = Math.floor(Math.random() * max);\n// let rand2 = getRandomInt(0, (operator === 'plus' || operator === 'times') ? (max - rand1) : (rand1 + 1));\n\nfunction App() {\n    const [answer, setAnswer] = useState('');\n    const[total, setTotal] = useState(0);\n\n    const checkResponse = () => {\n        const result = operator === 'plus' ? rand1 + rand2 : (operator === 'minus' ? rand1 - rand2 : rand1 * rand2);\n        if (answer == result) {\n            Toast.info('Rätt!', 1, null, false);\n            operator = getRandomOperation();\n            rand1 = Math.floor(Math.random() * max);\n            rand2 = Math.floor(Math.random() * max);\n            setAnswer('');\n            setTotal(total + 1);\n        } else {\n            Toast.info('Försök igen!', 1, null, false);\n        }\n    };\n\n    const onNumberClick = (value) => {\n        if (value == 'back') {\n            if (answer.length > 0) {\n                setAnswer(answer.substring(0, answer.length - 1));\n            }\n        } else {\n            setAnswer(answer.concat(value));\n        }\n    };\n\n    const flexItem = (valueArr) => {\n        return valueArr.map(value =>\n            (<Flex.Item style={{ fontSize: 17 }} key={value}>\n                <Button style={{ height: '3.5em', lineHeight: '3.5em' }} onClick={() => onNumberClick(value)}>{value}</Button>\n            </Flex.Item>))\n    };\n\n    return (\n        <div className=\"flex-container\">\n            <div className=\"sub-title\">Dags att räkna {name}!</div>\n            <div className=\"sub-title\">Klarat: {total}</div>\n            <CountdownTimer />\n            <WhiteSpace size=\"lg\" />\n            <Flex>\n                <Flex.Item style={{ fontSize: 20, fontWeight: 'bold', textAlign: 'center' }}>\n                    {rand1} {operator === 'plus' ? ' + ' : (operator === 'minus' ? ' - ' : <span> &times; </span>)} {rand2}\n                </Flex.Item>\n                <Flex.Item>\n                    <InputItem\n                        value={answer}\n                        style={{ color: 'black' }}\n                        type=\"text\"\n                        disabled\n                        placeholder=\"Svar\"\n                    />\n                </Flex.Item>\n                <Flex.Item style={{ textAlign: 'center' }}>\n                    <img alt=\"\" style={{ height: '5em' }} src=\"apadapa.png\"></img>\n                </Flex.Item>\n            </Flex>\n            <WhiteSpace size=\"lg\" />\n            <Flex>\n                {flexItem([1, 2, 3])}\n            </Flex>\n            <WhiteSpace size=\"md\" />\n            <Flex>\n                {flexItem([4, 5, 6])}\n            </Flex>\n            <WhiteSpace size=\"md\" />\n            <Flex>\n                {flexItem([7, 8, 9])}\n            </Flex>\n            <WhiteSpace size=\"md\" />\n            <Flex>\n                <Flex.Item>\n                    <Button style={{ height: '3.5em', lineHeight: '3.5em' }} onClick={() => onNumberClick('back')}>\n                        <span style={{ fontSize: '2em' }}>&larr;</span>\n                    </Button>\n                </Flex.Item>\n                {flexItem([0])}\n                <Flex.Item style={{ fontSize: 17 }}>\n                    <Button style={{ height: '3.5em', lineHeight: '3.5em' }} onClick={checkResponse}>\n                        <span style={{ fontSize: '1em' }}>&#10004;</span>\n                    </Button>\n                </Flex.Item>\n            </Flex>\n        </div >\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}