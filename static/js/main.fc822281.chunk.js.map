{"version":3,"sources":["CountdownTimer.js","App.js","index.js"],"names":["CountdownTimer","_useState","useState","_useState2","_slicedToArray","remainingTime","setRemainingTime","_useState3","_useState4","isRunning","setIsRunning","useEffect","interval","setInterval","prevTime","clearInterval","React","createElement","Fragment","_Flex","align","Item","className","seconds","minutes","Math","floor","remainingSeconds","concat","formatTime","style","flex","_Button","fontSize","height","width","lineHeight","onClick","prevState","operators","parsedQueryStrings","queryString","parse","window","location","search","name","max","operator","rand1","random","rand2","App","answer","setAnswer","total","setTotal","onNumberClick","value","length","substring","flexItem","valueArr","map","key","_WhiteSpace","size","fontWeight","textAlign","_InputItem","color","type","disabled","placeholder","alt","src","_Toast","info","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc822281.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Button, Flex, Grid} from \"antd-mobile\";\n\nfunction CountdownTimer() {\n    const initialTime = 300;\n    const [remainingTime, setRemainingTime] = useState(initialTime);\n    const [isRunning, setIsRunning] = useState(false);\n\n    useEffect(() => {\n        let interval;\n\n        if (isRunning) {\n            interval = setInterval(() => {\n                if (remainingTime > 0) {\n                    setRemainingTime((prevTime) => prevTime - 1);\n                } else {\n                    clearInterval(interval);\n                    setIsRunning(false);\n                }\n            }, 1000); // Update every second (1000 milliseconds)\n        } else {\n            clearInterval(interval);\n        }\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isRunning, remainingTime]);\n\n    const handleStartStop = () => {\n        setIsRunning((prevState) => !prevState);\n    };\n\n    const handleReset = () => {\n        setRemainingTime(initialTime);\n        setIsRunning(false);\n    };\n\n    const formatTime = (seconds) => {\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n    }\n\n    return (\n        <>\n            <Flex align=\"start\">\n                <Flex.Item>\n                    <div className=\"sub-title\">Tid kvar: {formatTime(remainingTime)}</div>\n                </Flex.Item>\n            </Flex>\n            <Flex>\n                <Flex.Item style={{flex: '0.3'}}>\n                    <Button style={{fontSize: 'medium', height: '2em', width: '5em', lineHeight: '2em'}}\n                            onClick={handleStartStop}>{isRunning ? 'Pausa' : 'Starta'}</Button>\n                </Flex.Item>\n                <Flex.Item>\n                    <Button style={{fontSize: 'medium', height: '2em', width: '5em', lineHeight: '2em'}}\n                            onClick={handleReset}>Nollställ</Button>\n                </Flex.Item>\n            </Flex>\n        </>\n    );\n}\n\nexport default CountdownTimer;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Button, Flex, InputItem, WhiteSpace, Toast } from 'antd-mobile';\nimport queryString from 'query-string';\nimport CountdownTimer from \"./CountdownTimer\";\n\nconst getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nconst operators = [/*'plus', 'minus'*/ 'times']; // times\nconst getRandomOperation = () => {\n    return operators[Math.floor(Math.random() * operators.length)];\n};\n\nconst parsedQueryStrings = queryString.parse(window.location.search);\nconst name = parsedQueryStrings.name;\nconst max = parsedQueryStrings.max;\nlet operator = operators[0];\nlet rand1 = Math.floor(Math.random() * max);\nlet rand2 = Math.floor(Math.random() * max);\n// let rand2 = getRandomInt(0, (operator === 'plus' || operator === 'times') ? (max - rand1) : (rand1 + 1));\n\nfunction App() {\n    const [answer, setAnswer] = useState('');\n    const[total, setTotal] = useState(0);\n\n    const checkResponse = () => {\n        const result = operator === 'plus' ? rand1 + rand2 : (operator === 'minus' ? rand1 - rand2 : rand1 * rand2);\n        if (answer == result) {\n            Toast.info('Rätt!', 1, null, false);\n            operator = getRandomOperation();\n            rand1 = Math.floor(Math.random() * max);\n            rand2 = Math.floor(Math.random() * max);\n            setAnswer('');\n            setTotal(total + 1);\n        } else {\n            Toast.info('Försök igen!', 1, null, false);\n        }\n    };\n\n    const onNumberClick = (value) => {\n        if (value == 'back') {\n            if (answer.length > 0) {\n                setAnswer(answer.substring(0, answer.length - 1));\n            }\n        } else {\n            setAnswer(answer.concat(value));\n        }\n    };\n\n    const flexItem = (valueArr) => {\n        return valueArr.map(value =>\n            (<Flex.Item style={{ fontSize: 17 }} key={value}>\n                <Button style={{ height: '3.5em', lineHeight: '3.5em' }} onClick={() => onNumberClick(value)}>{value}</Button>\n            </Flex.Item>))\n    };\n\n    return (\n        <div className=\"flex-container\">\n            <div className=\"sub-title\">Dags att räkna {name}!</div>\n            <div className=\"sub-title\">Klarat: {total}</div>\n            <CountdownTimer />\n            <WhiteSpace size=\"lg\" />\n            <Flex>\n                <Flex.Item style={{ fontSize: 20, fontWeight: 'bold', textAlign: 'center' }}>\n                    {rand1} {operator === 'plus' ? ' + ' : (operator === 'minus' ? ' - ' : <span> &times; </span>)} {rand2}\n                </Flex.Item>\n                <Flex.Item>\n                    <InputItem\n                        value={answer}\n                        style={{ color: 'black' }}\n                        type=\"text\"\n                        disabled\n                        placeholder=\"Svar\"\n                    />\n                </Flex.Item>\n                <Flex.Item style={{ textAlign: 'center' }}>\n                    <img alt=\"\" style={{ height: '5em' }} src=\"apadapa.png\"></img>\n                </Flex.Item>\n            </Flex>\n            <WhiteSpace size=\"lg\" />\n            <Flex>\n                {flexItem([1, 2, 3])}\n            </Flex>\n            <WhiteSpace size=\"md\" />\n            <Flex>\n                {flexItem([4, 5, 6])}\n            </Flex>\n            <WhiteSpace size=\"md\" />\n            <Flex>\n                {flexItem([7, 8, 9])}\n            </Flex>\n            <WhiteSpace size=\"md\" />\n            <Flex>\n                <Flex.Item>\n                    <Button style={{ height: '3.5em', lineHeight: '3.5em' }} onClick={() => onNumberClick('back')}>\n                        <span style={{ fontSize: '2em' }}>&larr;</span>\n                    </Button>\n                </Flex.Item>\n                {flexItem([0])}\n                <Flex.Item style={{ fontSize: 17 }}>\n                    <Button style={{ height: '3.5em', lineHeight: '3.5em' }} onClick={checkResponse}>\n                        <span style={{ fontSize: '1em' }}>&#10004;</span>\n                    </Button>\n                </Flex.Item>\n            </Flex>\n        </div >\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}