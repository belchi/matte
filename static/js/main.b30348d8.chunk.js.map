{"version":3,"sources":["CountdownTimer.js","App.js","index.js"],"names":["CountdownTimer","_ref","handleStartStop","handleReset","isRunning","remainingTime","setRemainingTime","setIsRunning","console","log","useEffect","interval","setInterval","prevTime","clearInterval","_Toast","success","React","createElement","Fragment","_Flex","align","Item","className","seconds","minutes","Math","floor","remainingSeconds","concat","formatTime","style","flex","_Button","fontSize","height","width","lineHeight","onClick","operators","parsedQueryStrings","queryString","parse","window","location","search","name","max","getRandomInt","range","random","operator","rand1","rand2","App","_useState","useState","_useState2","_slicedToArray","answer","setAnswer","_useState3","_useState4","total","setTotal","_useState5","_useState6","_useState7","_useState8","onNumberClick","value","length","substring","flexItem","valueArr","map","key","prevState","_WhiteSpace","size","fontWeight","textAlign","_InputItem","color","type","disabled","placeholder","alt","src","info","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b30348d8.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport {Button, Flex, Toast} from \"antd-mobile\";\n\nexport default function CountdownTimer({\n                                           handleStartStop,\n                                           handleReset,\n                                           isRunning,\n                                           remainingTime,\n                                           setRemainingTime,\n                                           setIsRunning\n                                       }) {\n\n    console.log('remainingTime', remainingTime);\n\n    useEffect(() => {\n        let interval;\n\n        if (isRunning) {\n            interval = setInterval(() => {\n                if (remainingTime > 0) {\n                    setRemainingTime((prevTime) => prevTime - 1);\n                } else {\n                    clearInterval(interval);\n                    setIsRunning(false);\n                    Toast.success('Tiden är slut!', 4, null, true);\n                }\n            }, 1000); // Update every second (1000 milliseconds)\n        } else {\n            clearInterval(interval);\n        }\n\n        return () => {\n            clearInterval(interval);\n        };\n    }, [isRunning, remainingTime]);\n\n    const formatTime = (seconds) => {\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;\n    }\n\n    return (\n        <>\n            <Flex align=\"start\">\n                <Flex.Item>\n                    <div className=\"sub-title\">Tid kvar: {formatTime(remainingTime)}</div>\n                </Flex.Item>\n            </Flex>\n            <Flex>\n                <Flex.Item style={{flex: '0.3'}}>\n                    <Button style={{fontSize: 'medium', height: '2em', width: '5em', lineHeight: '2em'}}\n                            onClick={() => handleStartStop()}>{isRunning ? 'Pausa' : 'Starta'}</Button>\n                </Flex.Item>\n                <Flex.Item>\n                    <Button style={{fontSize: 'medium', height: '2em', width: '5em', lineHeight: '2em'}}\n                            onClick={() => handleReset()}>Börja om</Button>\n                </Flex.Item>\n            </Flex>\n        </>\n    );\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Button, Flex, InputItem, Toast, WhiteSpace} from 'antd-mobile';\nimport queryString from 'query-string';\nimport CountdownTimer from \"./CountdownTimer\";\n\nconst operators = [/*'plus', 'minus'*/ 'times']; // times\nconst getRandomOperation = () => {\n    return operators[Math.floor(Math.random() * operators.length)];\n};\n\nconst parsedQueryStrings = queryString.parse(window.location.search);\nconst name = parsedQueryStrings.name;\nconst max = parsedQueryStrings.max;\n\nconst min = 2;\n\nconst getRandomInt = () => {\n    const range = max - min + 1;\n    return Math.floor(Math.random() * range) + min;\n};\n\nlet operator = operators[0];\nlet rand1 = getRandomInt();\nlet rand2 = getRandomInt();\n\n// let rand2 = getRandomInt(0, (operator === 'plus' || operator === 'times') ? (max - rand1) : (rand1 + 1));\n\nconst initialTime = 300;\n\nfunction App() {\n    const [answer, setAnswer] = useState('');\n    const [total, setTotal] = useState(0);\n    const [remainingTime, setRemainingTime] = useState(initialTime);\n    const [isRunning, setIsRunning] = useState(false);\n\n    const handleStartStop = () => {\n        setIsRunning((prevState) => !prevState);\n    };\n\n    const handleReset = () => {\n        setRemainingTime(initialTime);\n        setTotal(0);\n        setIsRunning(false);\n    };\n\n    const checkResponse = () => {\n        const result = operator === 'plus' ? rand1 + rand2 : (operator === 'minus' ? rand1 - rand2 : rand1 * rand2);\n        if (answer == result) {\n            Toast.info('Rätt!', 1, null, false);\n            operator = getRandomOperation();\n            rand1 = getRandomInt();\n            rand2 = getRandomInt();\n            setAnswer('');\n            setTotal(total + 1);\n        } else {\n            Toast.info('Försök igen!', 1, null, false);\n        }\n    };\n\n    const onNumberClick = (value) => {\n        if (value == 'back') {\n            if (answer.length > 0) {\n                setAnswer(answer.substring(0, answer.length - 1));\n            }\n        } else {\n            setAnswer(answer.concat(value));\n        }\n    };\n\n    const flexItem = (valueArr) => {\n        return valueArr.map(value =>\n            (<Flex.Item style={{fontSize: 17}} key={value}>\n                <Button style={{height: '3.5em', lineHeight: '3.5em'}}\n                        onClick={() => onNumberClick(value)}>{value}</Button>\n            </Flex.Item>))\n    };\n\n    return (\n        <div className=\"flex-container\">\n            <div className=\"sub-title\">Dags att räkna {name}!</div>\n            <div className=\"sub-title\">Klarat: {total}</div>\n            <CountdownTimer handleStartStop={handleStartStop} handleReset={handleReset} isRunning={isRunning}\n                            remainingTime={remainingTime} setRemainingTime={setRemainingTime}\n                            setIsRunning={setIsRunning}/>\n            <WhiteSpace size=\"lg\"/>\n            <Flex>\n                <Flex.Item style={{fontSize: 20, fontWeight: 'bold', textAlign: 'center'}}>\n                    {rand1} {operator === 'plus' ? ' + ' : (operator === 'minus' ? ' - ' :\n                    <span> &times; </span>)} {rand2}\n                </Flex.Item>\n                <Flex.Item>\n                    <InputItem\n                        value={answer}\n                        style={{color: 'black'}}\n                        type=\"text\"\n                        disabled\n                        placeholder=\"Svar\"\n                    />\n                </Flex.Item>\n                <Flex.Item style={{textAlign: 'center'}}>\n                    <img alt=\"\" style={{height: '5em'}} src=\"apadapa.png\"></img>\n                </Flex.Item>\n            </Flex>\n            <WhiteSpace size=\"lg\"/>\n            <Flex>\n                {flexItem([1, 2, 3])}\n            </Flex>\n            <WhiteSpace size=\"md\"/>\n            <Flex>\n                {flexItem([4, 5, 6])}\n            </Flex>\n            <WhiteSpace size=\"md\"/>\n            <Flex>\n                {flexItem([7, 8, 9])}\n            </Flex>\n            <WhiteSpace size=\"md\"/>\n            <Flex>\n                <Flex.Item>\n                    <Button style={{height: '3.5em', lineHeight: '3.5em'}} onClick={() => onNumberClick('back')}>\n                        <span style={{fontSize: '2em'}}>&larr;</span>\n                    </Button>\n                </Flex.Item>\n                {flexItem([0])}\n                <Flex.Item style={{fontSize: 17}}>\n                    <Button style={{height: '3.5em', lineHeight: '3.5em'}} onClick={checkResponse}>\n                        <span style={{fontSize: '1em'}}>&#10004;</span>\n                    </Button>\n                </Flex.Item>\n            </Flex>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}